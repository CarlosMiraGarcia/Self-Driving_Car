module Dashboard_warning_lights__checklight__x
  use _gnatprove_standard.Main
  use int.Int
  
  val function x : int
end

module Dashboard_warning_lights__checklight__y
  use _gnatprove_standard.Main
  use int.Int
  
  val function y : int
end

module Dashboard_warning_lights__switch
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type switch
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = switch,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type switch__ref = { mutable switch__content : switch }
  
  function switch__ref_switch__content__projection (a: switch__ref) : switch =
    a.switch__content
  
  meta "model_projection" function switch__ref_switch__content__projection
  
  meta "inline:no" function switch__ref_switch__content__projection
  
  val switch__havoc (x: switch__ref) : unit
    writes { x }
end

module Dashboard_warning_lights__switch__rep
  use Dashboard_warning_lights__switch as Dashboard_warning_lights__switch
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Dashboard_warning_lights__switch.switch,
    predicate in_range = Dashboard_warning_lights__switch.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Dashboard_warning_lights__light__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Dashboard_warning_lights__switch as Dashboard_warning_lights__switch
  use Dashboard_warning_lights__switch__rep as Dashboard_warning_lights__switch__rep
  
  type __split_fields = {
                       rec__dashboard_warning_lights__light__state :
                         Dashboard_warning_lights__switch.switch;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__dashboard_warning_lights__light__state__projection (a: __split_fields) : 
    Dashboard_warning_lights__switch.switch =
    a.rec__dashboard_warning_lights__light__state
  
  meta "model_projection" function __split_fields_rec__dashboard_warning_lights__light__state__projection
  
  meta "inline:no" function __split_fields_rec__dashboard_warning_lights__light__state__projection
  
  function __split_fields_rec__ext____projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____projection
  
  meta "inline:no" function __split_fields_rec__ext____projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function __rep_attr__tag__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__projection
  
  meta "inline:no" function __rep_attr__tag__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate dashboard_warning_lights__light__state__pred (a: __rep) = true
  
  val dashboard_warning_lights__light__state__pred (a: __rep) : bool
    ensures { result
                <->
                (dashboard_warning_lights__light__state__pred (a : __rep)) }
  
  val rec__dashboard_warning_lights__light__state_ (a: __rep) : Dashboard_warning_lights__switch.switch
    requires { dashboard_warning_lights__light__state__pred a }
    ensures { (result
                 = ((__split_fields a).rec__dashboard_warning_lights__light__state)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((Dashboard_warning_lights__switch__rep.to_rep
           ((__split_fields a).rec__dashboard_warning_lights__light__state))
          = (Dashboard_warning_lights__switch__rep.to_rep
               ((__split_fields b).rec__dashboard_warning_lights__light__state))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module Dashboard_warning_lights__light
  use export Dashboard_warning_lights__light__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type light = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function dashboard_warning_lights__light__state__first__bit : int
  
  val function dashboard_warning_lights__light__state__last__bit : int
  
  val function dashboard_warning_lights__light__state__position : int
  
  axiom dashboard_warning_lights__light__state__first__bit_axiom:
    (dashboard_warning_lights__light__state__first__bit >= (0 : int))
  
  axiom dashboard_warning_lights__light__state__last__bit_axiom:
    (dashboard_warning_lights__light__state__last__bit
       > dashboard_warning_lights__light__state__first__bit)
  
  axiom dashboard_warning_lights__light__state__position_axiom:
    (dashboard_warning_lights__light__state__position >= (0 : int))
  
  val function user_eq (a: light) (b: light) : bool
  
  val function dummy : light
  
  type light__ref = { mutable light__content : light }
  
  function light__ref_light__content__projection (a: light__ref) : light =
    a.light__content
  
  meta "model_projection" function light__ref_light__content__projection
  
  meta "inline:no" function light__ref_light__content__projection
  
  val light__havoc (x: light__ref) : unit
    writes { x }
end

module Array__Int__Dashboard_warning_lights__light
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Dashboard_warning_lights__light as Dashboard_warning_lights__light
  
  function index_I1_one : int = 1 : int
  
  type component_type = Dashboard_warning_lights__light.light
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_161 : int.
          if ((a__first <= temp___idx_161) /\ (temp___idx_161 <= a__last)) then
            ((Dashboard_warning_lights__light.bool_eq
                ((get a) temp___idx_161))
               ((get b) ((b__first - a__first) + temp___idx_161)))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_161 : int.
                 if ((a__first <= temp___idx_161) /\
                       (temp___idx_161 <= a__last)) then
                   ((Dashboard_warning_lights__light.bool_eq
                       ((get a) temp___idx_161))
                      ((get b) ((b__first - a__first) + temp___idx_161)))
                 else true)))
end

module Dashboard_warning_lights__checklight__this
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Dashboard_warning_lights__light as Array__Int__Dashboard_warning_lights__light
  
  val this : Array__Int__Dashboard_warning_lights__light.map__ref
end

module Dashboard_warning_lights__switch___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Dashboard_warning_lights__switch as Dashboard_warning_lights__switch
  
  predicate dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) =
    if ((temp___is_init_162 = True) \/
          (Dashboard_warning_lights__switch.first
             <= Dashboard_warning_lights__switch.last)) then
      (((Dashboard_warning_lights__switch.dynamic_property
           Dashboard_warning_lights__switch.first)
          Dashboard_warning_lights__switch.last)
         temp___expr_166)
    else true
  
  val dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_166 : int))
                      (temp___is_init_162 : bool))
                     (temp___skip_constant_163 : bool))
                    (temp___do_toplevel_164 : bool))
                   (temp___do_typ_inv_165 : bool)) }
  
  predicate default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) =
    true
  
  val default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_167 : int))
                   (temp___skip_top_level_168 : bool)) }
end

module Dashboard_warning_lights__typesoflights
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type typesoflights
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (8 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = typesoflights,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type typesoflights__ref = {
                           mutable typesoflights__content : typesoflights
                           }
  
  function typesoflights__ref_typesoflights__content__projection (a: typesoflights__ref) : typesoflights =
    a.typesoflights__content
  
  meta "model_projection" function typesoflights__ref_typesoflights__content__projection
  
  meta "inline:no" function typesoflights__ref_typesoflights__content__projection
  
  val typesoflights__havoc (x: typesoflights__ref) : unit
    writes { x }
end

module Dashboard_warning_lights__typesoflights___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Dashboard_warning_lights__typesoflights as Dashboard_warning_lights__typesoflights
  
  predicate dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) =
    if ((temp___is_init_169 = True) \/
          (Dashboard_warning_lights__typesoflights.first
             <= Dashboard_warning_lights__typesoflights.last)) then
      (((Dashboard_warning_lights__typesoflights.dynamic_property
           Dashboard_warning_lights__typesoflights.first)
          Dashboard_warning_lights__typesoflights.last)
         temp___expr_173)
    else true
  
  val dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_173 : int))
                      (temp___is_init_169 : bool))
                     (temp___skip_constant_170 : bool))
                    (temp___do_toplevel_171 : bool))
                   (temp___do_typ_inv_172 : bool)) }
  
  predicate default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) =
    true
  
  val default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_174 : int))
                   (temp___skip_top_level_175 : bool)) }
end

module Dashboard_warning_lights__lights___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Dashboard_warning_lights__typesoflights as Dashboard_warning_lights__typesoflights
  use Dashboard_warning_lights__light as Dashboard_warning_lights__light
  use Array__Int__Dashboard_warning_lights__light as Array__Int__Dashboard_warning_lights__light
  use Array__Int__Dashboard_warning_lights__light as Array__Int__Dashboard_warning_lights__light
  use Array__Int__Dashboard_warning_lights__light as Array__Int__Dashboard_warning_lights__light
  
  predicate dynamic_invariant (temp___expr_188: Array__Int__Dashboard_warning_lights__light.map) (temp___is_init_184: bool) (temp___skip_constant_185: bool) (temp___do_toplevel_186: bool) (temp___do_typ_inv_187: bool) =
    true
  
  val dynamic_invariant (temp___expr_188: Array__Int__Dashboard_warning_lights__light.map) (temp___is_init_184: bool) (temp___skip_constant_185: bool) (temp___do_toplevel_186: bool) (temp___do_typ_inv_187: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_188 :
                          Array__Int__Dashboard_warning_lights__light.map))
                      (temp___is_init_184 : bool))
                     (temp___skip_constant_185 : bool))
                    (temp___do_toplevel_186 : bool))
                   (temp___do_typ_inv_187 : bool)) }
  
  predicate default_initial_assumption (temp___expr_190: Array__Int__Dashboard_warning_lights__light.map) (temp___skip_top_level_191: bool) =
    forall temp___192 : int.
      if ((Dashboard_warning_lights__typesoflights.first <= temp___192) /\
            (temp___192 <= Dashboard_warning_lights__typesoflights.last)) then
        (let temp___193 =
           (Array__Int__Dashboard_warning_lights__light.get temp___expr_190)
             temp___192 in
         ((Dashboard_warning_lights__light.attr__tag temp___193)
            = Dashboard_warning_lights__light.__tag))
      else true
  
  val default_initial_assumption (temp___expr_190: Array__Int__Dashboard_warning_lights__light.map) (temp___skip_top_level_191: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_190 :
                       Array__Int__Dashboard_warning_lights__light.map))
                   (temp___skip_top_level_191 : bool)) }
end

module Dashboard_warning_lights__light___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Dashboard_warning_lights__light as Dashboard_warning_lights__light
  
  predicate dynamic_invariant (temp___expr_180: Dashboard_warning_lights__light.light) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) =
    true
  
  val dynamic_invariant (temp___expr_180: Dashboard_warning_lights__light.light) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_180 :
                          Dashboard_warning_lights__light.light))
                      (temp___is_init_176 : bool))
                     (temp___skip_constant_177 : bool))
                    (temp___do_toplevel_178 : bool))
                   (temp___do_typ_inv_179 : bool)) }
  
  predicate default_initial_assumption (temp___expr_181: Dashboard_warning_lights__light.light) (temp___skip_top_level_182: bool) =
    ((Dashboard_warning_lights__light.attr__tag temp___expr_181)
       = Dashboard_warning_lights__light.__tag)
  
  val default_initial_assumption (temp___expr_181: Dashboard_warning_lights__light.light) (temp___skip_top_level_182: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_181 : Dashboard_warning_lights__light.light))
                   (temp___skip_top_level_182 : bool)) }
end

module Dashboard_warning_lights__checklight__x___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Dashboard_warning_lights__checklight__y___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Dashboard_warning_lights__checklight__this___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Dashboard_warning_lights__checklight__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Dashboard_warning_lights__checklight__x as Dashboard_warning_lights__checklight__x
  use Dashboard_warning_lights__checklight__y as Dashboard_warning_lights__checklight__y
  use Array__Int__Dashboard_warning_lights__light as Array__Int__Dashboard_warning_lights__light
  use Dashboard_warning_lights__checklight__this as Dashboard_warning_lights__checklight__this
  use Dashboard_warning_lights__switch as Dashboard_warning_lights__switch
  use Dashboard_warning_lights__switch___axiom as Dashboard_warning_lights__switch___axiom
  use Dashboard_warning_lights__switch__rep as Dashboard_warning_lights__switch__rep
  use Dashboard_warning_lights__typesoflights___axiom as Dashboard_warning_lights__typesoflights___axiom
  use Dashboard_warning_lights__light as Dashboard_warning_lights__light
  use Array__Int__Dashboard_warning_lights__light as Array__Int__Dashboard_warning_lights__light
  use Dashboard_warning_lights__lights___axiom as Dashboard_warning_lights__lights___axiom
  use Dashboard_warning_lights__switch___axiom as Dashboard_warning_lights__switch___axiom
  use Dashboard_warning_lights__typesoflights___axiom as Dashboard_warning_lights__typesoflights___axiom
  use Dashboard_warning_lights__light___axiom as Dashboard_warning_lights__light___axiom
  use Dashboard_warning_lights__lights___axiom as Dashboard_warning_lights__lights___axiom
  use Dashboard_warning_lights__checklight__x___axiom as Dashboard_warning_lights__checklight__x___axiom
  use Dashboard_warning_lights__checklight__y___axiom as Dashboard_warning_lights__checklight__y___axiom
  use Dashboard_warning_lights__checklight__this___axiom as Dashboard_warning_lights__checklight__this___axiom
  
  let def (__void_param : unit)
    requires { [#"dashboard_warning_lights.ads" 20 0 0] true }
    ensures { [#"dashboard_warning_lights.ads" 20 0 0]
              [#"dashboard_warning_lights.ads" 21 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:dashboard_warning_lights.ads:21:14]
              [@GP_Shape:pragargs__or]
              [@comment:     Post => x = On or x = Off or x = Error;              ^ dashboard_warning_lights.ads:21:14:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Id:1]
              [@GP_Pretty_Ada:3223]
              [@GP_Sloc:dashboard_warning_lights.ads:21:14]
              (((Dashboard_warning_lights__checklight__x.x = (0 : int)) \/
                  (Dashboard_warning_lights__checklight__x.x = (1 : int))) \/
                 (Dashboard_warning_lights__checklight__x.x = (2 : int))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram dashboard_warning_lights.ads:20]
      ());
     assume {
       ((((Dashboard_warning_lights__switch___axiom.dynamic_invariant
             Dashboard_warning_lights__checklight__x.x)
            True)
           False)
          True)
         True };
     assume {
       ((((Dashboard_warning_lights__typesoflights___axiom.dynamic_invariant
             Dashboard_warning_lights__checklight__y.y)
            True)
           False)
          True)
         True };
     assume {
       ((((Dashboard_warning_lights__lights___axiom.dynamic_invariant
             (Dashboard_warning_lights__checklight__this.this.Array__Int__Dashboard_warning_lights__light.map__content))
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram dashboard_warning_lights.ads:20]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram dashboard_warning_lights.ads:20]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram dashboard_warning_lights.ads:20]
      ());
     (try
        ([@GP_Sloc:dashboard_warning_lights.adb:15:21]
         [#"dashboard_warning_lights.adb" 15 0 0]
         [#"dashboard_warning_lights.adb" 15 0 0]
         (Dashboard_warning_lights__checklight__this.this.Array__Int__Dashboard_warning_lights__light.map__content <-
            (((Array__Int__Dashboard_warning_lights__light.set
                 (Dashboard_warning_lights__checklight__this.this.Array__Int__Dashboard_warning_lights__light.map__content))
                Dashboard_warning_lights__checklight__y.y)
               (let temp___209 =
                  (Array__Int__Dashboard_warning_lights__light.get
                     (Dashboard_warning_lights__checklight__this.this.
                        Array__Int__Dashboard_warning_lights__light.map__content))
                    Dashboard_warning_lights__checklight__y.y in
                ([#"dashboard_warning_lights.adb" 15 0 0]
                 (begin
                    ensures { true }
                    let _ =
                      let _ =
                        (Dashboard_warning_lights__light.__split_fields
                            temp___209).Dashboard_warning_lights__light.rec__dashboard_warning_lights__light__state in
                      () in
                    ()
                  end));
                ({ temp___209 with
                   Dashboard_warning_lights__light.__split_fields =
                     ({ (Dashboard_warning_lights__light.__split_fields
                            temp___209) with
                        Dashboard_warning_lights__light.rec__dashboard_warning_lights__light__state =
                          (Dashboard_warning_lights__switch__rep.of_rep
                             Dashboard_warning_lights__checklight__x.x) }) })))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.orb
               ((Boolean.orb
                   (Dashboard_warning_lights__checklight__x.x = (0 : int)))
                  (Dashboard_warning_lights__checklight__x.x = (1 : int))))
              (Dashboard_warning_lights__checklight__x.x = (2 : int)) in
          () in
        ()
      end))
end
